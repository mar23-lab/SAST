# Custom Semgrep Rules for Enhanced Security Scanning
# Documentation: https://semgrep.dev/docs/writing-rules/

rules:
  # SQL Injection Detection
  - id: custom-sql-injection
    patterns:
      - pattern: $QUERY = "..." + $USER_INPUT + "..."
      - pattern: $QUERY = $USER_INPUT + "..."
      - pattern: $DB.execute("..." + $VAR + "...")
      - pattern: $DB.query("..." + $VAR + "...")
    message: Potential SQL injection vulnerability detected
    languages: [python, javascript, typescript, java, php]
    severity: ERROR
    metadata:
      category: security
      owasp: "A03:2021 - Injection"
      cwe: "CWE-89: Improper Neutralization of Special Elements used in an SQL Command"
      confidence: HIGH

  # XSS Prevention
  - id: custom-xss-detection
    patterns:
      - pattern: $EL.innerHTML = $VAR
      - pattern: $EL.outerHTML = $VAR
      - pattern: document.write($VAR)
      - pattern: eval($VAR)
    message: Potential XSS vulnerability - unsafe HTML assignment
    languages: [javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      owasp: "A03:2021 - Injection"
      cwe: "CWE-79: Cross-site Scripting"
      confidence: HIGH

  # Hardcoded Secrets Detection
  - id: hardcoded-api-keys
    patterns:
      - pattern: $VAR = "sk_live_..."
      - pattern: $VAR = "pk_live_..."
      - pattern: $VAR = "rk_live_..."
      - pattern: api_key = "..."
      - pattern: apikey = "..."
      - pattern: secret_key = "..."
      - pattern: access_token = "..."
    message: Hardcoded API key or secret detected
    languages: [python, javascript, typescript, java, go, ruby]
    severity: ERROR
    metadata:
      category: security
      owasp: "A07:2021 - Identification and Authentication Failures"
      cwe: "CWE-798: Use of Hard-coded Credentials"
      confidence: HIGH

  # Weak Cryptography
  - id: weak-hash-algorithms
    patterns:
      - pattern: hashlib.md5(...)
      - pattern: hashlib.sha1(...)
      - pattern: crypto.createHash('md5')
      - pattern: crypto.createHash('sha1')
      - pattern: MessageDigest.getInstance("MD5")
      - pattern: MessageDigest.getInstance("SHA1")
    message: Weak cryptographic hash algorithm detected
    languages: [python, javascript, typescript, java]
    severity: WARNING
    metadata:
      category: security
      owasp: "A02:2021 - Cryptographic Failures"
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      confidence: HIGH

  # Insecure Random Number Generation
  - id: insecure-random
    patterns:
      - pattern: Math.random()
      - pattern: random.random()
      - pattern: new Random()
    message: Insecure random number generation for security purposes
    languages: [javascript, typescript, python, java]
    severity: WARNING
    metadata:
      category: security
      owasp: "A02:2021 - Cryptographic Failures"
      cwe: "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator"
      confidence: MEDIUM

  # Command Injection
  - id: command-injection
    patterns:
      - pattern: os.system($VAR)
      - pattern: subprocess.call($VAR, shell=True)
      - pattern: exec($VAR)
      - pattern: eval($VAR)
      - pattern: child_process.exec($VAR)
      - pattern: Runtime.getRuntime().exec($VAR)
    message: Potential command injection vulnerability
    languages: [python, javascript, typescript, java]
    severity: ERROR
    metadata:
      category: security
      owasp: "A03:2021 - Injection"
      cwe: "CWE-78: OS Command Injection"
      confidence: HIGH

  # Path Traversal
  - id: path-traversal
    patterns:
      - pattern: open($VAR + "/" + $USER_INPUT)
      - pattern: open($USER_INPUT)
      - pattern: fs.readFile($USER_INPUT)
      - pattern: new File($USER_INPUT)
    message: Potential path traversal vulnerability
    languages: [python, javascript, typescript, java]
    severity: ERROR
    metadata:
      category: security
      owasp: "A01:2021 - Broken Access Control"
      cwe: "CWE-22: Path Traversal"
      confidence: MEDIUM

  # Insecure Deserialization
  - id: insecure-deserialization
    patterns:
      - pattern: pickle.loads($VAR)
      - pattern: yaml.load($VAR)
      - pattern: JSON.parse($USER_INPUT)
      - pattern: ObjectInputStream.readObject()
    message: Insecure deserialization detected
    languages: [python, javascript, typescript, java]
    severity: ERROR
    metadata:
      category: security
      owasp: "A08:2021 - Software and Data Integrity Failures"
      cwe: "CWE-502: Deserialization of Untrusted Data"
      confidence: HIGH

  # Missing HTTPS
  - id: http-usage
    patterns:
      - pattern: requests.get("http://...")
      - pattern: fetch("http://...")
      - pattern: urllib.request.urlopen("http://...")
      - pattern: new URL("http://...")
    message: HTTP usage detected - consider using HTTPS
    languages: [python, javascript, typescript]
    severity: INFO
    metadata:
      category: security
      owasp: "A02:2021 - Cryptographic Failures"
      cwe: "CWE-319: Cleartext Transmission of Sensitive Information"
      confidence: HIGH

  # Debug Code in Production
  - id: debug-code
    patterns:
      - pattern: console.log(...)
      - pattern: print(...)
      - pattern: debugger
      - pattern: DEBUG = True
      - pattern: app.debug = True
    message: Debug code detected - remove before production
    languages: [python, javascript, typescript]
    severity: INFO
    metadata:
      category: security
      owasp: "A09:2021 - Security Logging and Monitoring Failures"
      cwe: "CWE-489: Active Debug Code"
      confidence: LOW

  # Weak SSL/TLS Configuration
  - id: weak-ssl-config
    patterns:
      - pattern: ssl.create_default_context().check_hostname = False
      - pattern: ssl.create_default_context().verify_mode = ssl.CERT_NONE
      - pattern: process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
      - pattern: requests.get(..., verify=False)
    message: Weak SSL/TLS configuration detected
    languages: [python, javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      owasp: "A02:2021 - Cryptographic Failures"
      cwe: "CWE-295: Improper Certificate Validation"
      confidence: HIGH

  # Regex DoS (ReDoS)
  - id: regex-dos
    patterns:
      - pattern: re.compile(r'(a+)+')
      - pattern: re.compile(r'(a|a)*')
      - pattern: new RegExp('(a+)+')
      - pattern: /^(a+)+$/
    message: Potential ReDoS (Regular Expression Denial of Service) vulnerability
    languages: [python, javascript, typescript]
    severity: WARNING
    metadata:
      category: security
      owasp: "A06:2021 - Vulnerable and Outdated Components"
      cwe: "CWE-1333: Inefficient Regular Expression Complexity"
      confidence: MEDIUM

  # JWT Security Issues
  - id: jwt-none-algorithm
    patterns:
      - pattern: jwt.decode(..., algorithms=['none'])
      - pattern: jwt.decode(..., verify=False)
      - pattern: jsonwebtoken.verify(..., null)
    message: JWT security issue - 'none' algorithm or verification disabled
    languages: [python, javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      owasp: "A02:2021 - Cryptographic Failures"
      cwe: "CWE-347: Improper Verification of Cryptographic Signature"
      confidence: HIGH

  # CORS Misconfiguration
  - id: cors-wildcard
    patterns:
      - pattern: Access-Control-Allow-Origin = "*"
      - pattern: header("Access-Control-Allow-Origin", "*")
      - pattern: cors({ origin: "*" })
    message: CORS wildcard configuration detected - potential security risk
    languages: [javascript, typescript, python, php]
    severity: WARNING
    metadata:
      category: security
      owasp: "A05:2021 - Security Misconfiguration"
      cwe: "CWE-942: Overly Permissive Cross-domain Whitelist"
      confidence: HIGH

  # XXE (XML External Entity) Prevention
  - id: xxe-vulnerability
    patterns:
      - pattern: ET.parse($VAR)
      - pattern: ET.fromstring($VAR)
      - pattern: xml.etree.ElementTree.parse($VAR)
      - pattern: new DOMParser().parseFromString($VAR)
    message: Potential XXE vulnerability - XML parsing without proper configuration
    languages: [python, javascript, typescript, java]
    severity: WARNING
    metadata:
      category: security
      owasp: "A05:2021 - Security Misconfiguration"
      cwe: "CWE-611: XML External Entity Reference"
      confidence: MEDIUM

  # Information Disclosure
  - id: sensitive-info-exposure
    patterns:
      - pattern: print(password)
      - pattern: console.log(password)
      - pattern: logger.info(secret)
      - pattern: System.out.println(apiKey)
    message: Potential sensitive information exposure in logs
    languages: [python, javascript, typescript, java]
    severity: WARNING
    metadata:
      category: security
      owasp: "A09:2021 - Security Logging and Monitoring Failures"
      cwe: "CWE-532: Information Exposure Through Log Files"
      confidence: MEDIUM
